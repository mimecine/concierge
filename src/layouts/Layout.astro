---
import '../../src/styles/globals.css';
import '@fontsource/inter/400.css';
import '@fontsource/inter/800.css';
import interFont400 from '@fontsource/inter/files/inter-latin-400-normal.woff2?url';
import interFont800 from '@fontsource/inter/files/inter-latin-800-normal.woff2?url';

import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>{title}</title>
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="preload" as="font" type="font/woff2" href={interFont400} crossorigin />
        <link rel="preload" as="font" type="font/woff2" href={interFont800} crossorigin />
        <slot name="head" />
    </head>
    <body class="antialiased text-white bg-[#355C7D]" x-data="{data:{}}">
        <div class="flex flex-col min-h-screen xpx-6 bg-grid-pattern xsm:px-12">
            <div class="flex flex-col w-full xmax-w-5xl mx-auto grow">
                <main class="grow"><slot /></main>
            </div>
        </div>
    </body>
</html>
<script is:inline>
    Cart = window.Cart || {};
    function cart() {
        return {
            isOpen: false,
            isLoading: false,
            cartItems: [],
            cartTotal: 0,
            shopifyCart: null, // This would be an instance of your ShoppingCart class

            async init() {
                // Initialize your ShoppingCart class here
                this.shopifyCart = Cart;
                window.shopifyCart = this.shopifyCart;
                //await this.fetchCart();
            },

            async fetchCart() {
                this.isLoading = true;
                try {
                    await this.shopifyCart.fetchCart();
                    this.cartItems = this.shopifyCart.lines; /*.map((edge) => ({
                        id: edge.node.id,
                        title: edge.node.merchandise.title,
                        price: edge.node.merchandise.price.amount,
                        quantity: edge.node.quantity
                    }));*/
                    this.cartTotal = cart.cost.totalAmount.amount;
                } catch (error) {
                    console.error('Error fetching cart:', error);
                } finally {
                    this.isLoading = false;
                }
            },

            async addItem(variantId, quantity = 1) {
                let res = await this.shopifyCart.addItem(variantId, quantity);
                console.log(res);
                await this.fetchCart();
                return res;
            },

            async updateQuantity(itemId, newQuantity) {
                let res = false;
                if (newQuantity < 1) {
                    res = await this.removeItem(itemId);
                } else {
                    res = await this.shopifyCart.updateCartItem(itemId, newQuantity);
                    await this.fetchCart();
                }
                return res;
            },

            async removeItem(itemId) {
                let res = await this.shopifyCart.removeFromCart(itemId);
                await this.fetchCart();
                return res;
            },

            toggleCart() {
                this.isOpen = !this.isOpen;
            },

            closeCart() {
                this.isOpen = false;
            },

            formatMoney(amount) {
                return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
            },

            checkout() {
                // Implement checkout logic here
                window.location.href = this.shopifyCart.checkoutUrl;
                console.log('Proceeding to checkout...');
            }
        };
    }
    window.cart = cart;
</script>

<script>
    import Cart from '../assets/cart.js';
    window.Cart = Cart;
    window.Cart.fetchCart();
</script>

<script>
    import { createStorefrontApiClient } from '@shopify/storefront-api-client';
    const gql = String.raw;
    const SHP_ARCHIVE_TOKEN = '6b98671c3560340427f4a1baeaf7ef69';
    const SHP_SHOP_TOKEN = '7766fe447c722c1317e528bdc92f1f2d';

    const shp = {
        archive: createStorefrontApiClient({
            storeDomain: 'kioskarchive.myshopify.com',
            apiVersion: '2025-01',
            publicAccessToken: SHP_ARCHIVE_TOKEN
        }),
        shop: createStorefrontApiClient({
            storeDomain: 'kioskinkiosk.myshopify.com',
            apiVersion: '2025-01',
            publicAccessToken: SHP_SHOP_TOKEN
        })
    };

    const productSearchQuery = gql`
        query searchProducts($query: String!, $first: Int) {
            search(query: $query, first: $first, types: PRODUCT) {
                edges {
                    node {
                        ... on Product {
                            id
                            title
                            handle
                            description
                            descriptionHtml
                            featuredImage {
                                url(transform: { maxWidth: 300 })
                                altText
                            }
                            images(first: 3) {
                                edges {
                                    node {
                                        originalSrc
                                        url(transform: { maxWidth: 300 })
                                        altText
                                    }
                                }
                            }
                            variants(first: 5) {
                                edges {
                                    node {
                                        id
                                        title
                                        availableForSale
                                        price {
                                            amount
                                            currencyCode
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    `;

    window.suggestProducts = async (words) => {
        const products = [];
        var { data } = await shp.shop.request(productSearchQuery, { variables: { query: `title:${words}`, first: 5 } });
        data?.search?.edges.map((p) => {
            p.node.from = 'shop';
            p.node.active = true;
            products.push(p.node);
        });
        var { data } = await shp.archive.request(productSearchQuery, { variables: { query: `title:${words}`, first: 5 } });
        data?.search?.edges.map((p) => {
            p.node.from = 'archive';
            products.push(p.node);
        });
        return products;
    };
</script>
