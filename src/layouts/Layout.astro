---
import '../../src/styles/globals.css';

interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>{title}</title>
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <slot name="head" />
    </head>
    <body class="antialiased text-white bg-[#355C7D] font-mono" x-data>
        <div class="flex flex-col min-h-screen xpx-6 bg-grid-pattern xsm:px-12">
            <div class="flex flex-col w-full xmax-w-5xl mx-auto grow">
                <main class="grow"><slot /></main>
            </div>
        </div>
    </body>
</html>
<script>
    import { createStorefrontApiClient } from '@shopify/storefront-api-client';

    const gql = String.raw;
    const SHP_ARCHIVE_TOKEN = '6b98671c3560340427f4a1baeaf7ef69';
    const SHP_SHOP_TOKEN = '7766fe447c722c1317e528bdc92f1f2d';

    const shp = {
        archive: createStorefrontApiClient({
            storeDomain: 'kioskarchive.myshopify.com',
            apiVersion: '2025-01',
            publicAccessToken: SHP_ARCHIVE_TOKEN
        }),
        shop: createStorefrontApiClient({
            storeDomain: 'kioskinkiosk.myshopify.com',
            apiVersion: '2025-01',
            publicAccessToken: SHP_SHOP_TOKEN
        })
    };

    const productSearchQuery = gql`
        query searchProducts($query: String!, $first: Int) {
            search(query: $query, first: $first, types: PRODUCT) {
                edges {
                    node {
                        ... on Product {
                            id
                            title
                            handle
                            description
                            descriptionHtml
                            featuredImage {
                                url(transform: { maxWidth: 300 })
                                altText
                            }
                            variants(first: 5) {
                                edges {
                                    node {
                                        id
                                        title
                                        availableForSale
                                        price {
                                            amount
                                            currencyCode
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    `;

    declare global {
        interface Window {
            suggestProducts: Function;
            _log: Function;
        }
    }
    window.suggestProducts = async (words) => {
        const products = [];
        var { data } = await shp.shop.request(productSearchQuery, { variables: { query: `title:${words}`, first: 5 } });
        data?.search?.edges.map((p) => {
            p.node.from = 'shop';
            p.node.active = true;
            console.log('shop', p.node.title);
            products.push(p.node);
        });
        var { data } = await shp.archive.request(productSearchQuery, { variables: { query: `title:${words}`, first: 5 } });
        data?.search?.edges.map((p) => {
            p.node.from = 'archive';
            p.node.active = false;
            console.log('archive', p.node.title);
            products.push(p.node);
        });
        return products;
    };
    window._log = (msg) => console.log(msg);
</script>
<style>
    #jaas-container {
        height: 100%;
    }
</style>
