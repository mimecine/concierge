---
interface Props {
    openLabel?: string;
    closeLabel?: string;
}

const { openLabel = 'Open Cart', closeLabel = 'Close Cart' } = Astro.props;
---

<div x-data="{isOpen:true,openLabel: '${openLabel}', closeLabel: '${closeLabel}', D:{}, cost:'', lines:[]}" x-init="isOpen=true;" x-ref="shoppingcart">
    <div
        class="absolute right-0 top-0 w-40 min-h-screen p-2 bg-red-200 border-l-2 text-red-900 grid grid-flow-row grid-rows-[auto,1fr,auto]"
        x-show="data.cartIsOpen"
    >
        <div class="w-full text-right">
            <button @click="data.cartIsOpen=false" class="pb-2 text-black hover:text-red-500" x-ref="openbutton">
                <svg class="h-6 w-6 text-right" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div>
            <div class="gap-2 grid grid-cols-2">
                <template x-for="line in lines" :key="line.id">
                    <div class="text-right" x-data="{quantity:line.quantity}">
                        <!-- <h3 class="text-sm" x-text="`${line.merchandise.product.title} ( ${line.merchandise.title} ) `"></h3> -->
                        <img
                            class="w-full border border-current"
                            :src="line.merchandise.image.url"
                            width="300"
                            height="300"
                            :alt="`${line.merchandise.product.title} ( ${line.merchandise.title} ) `"
                            :title="`${line.merchandise.product.title} ( ${line.merchandise.title} ) `"
                        />
                        <button
                            x-data="{waiting:false}"
                            :class="{'opacity-50 rotate-45':waiting}"
                            class=""
                            @click="waiting=true; await D.Cart.removeItem(line.merchandise.id) && quantity--; waiting=false">[-]</button
                        >
                        <span x-text="quantity" class="font-bold"></span>
                        <!-- @
                        <span
                            x-text="Intl.NumberFormat('en-US',{style: 'currency', currency: 'USD',trailingZeroDisplay:'stripIfInteger' }).format(line.merchandise.price.amount)"
                        ></span> -->
                        <button
                            x-data="{waiting:false}"
                            :class="{'opacity-50 rotate-45':waiting}"
                            class="hover:text-red-500"
                            @click="waiting=true; await D.Cart.addItem(line.merchandise.id) && quantity++ ; waiting=false">[+]</button
                        >
                    </div>
                </template>
                <slot />
            </div>
            <div x-show="lines.length == 0" class="h-full text-center grid items-center text-red-500">HEY, IS EMPTY!</div>
        </div>
        <div class="text-right">
            ----------------<br />
            <p>
                Total-ish: <span x-text="Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD',trailingZeroDisplay:'stripIfInteger' }).format(cost)"
                ></span>
            </p>
            <p>Tax & Ship: LATER</p>
            <a :href="D.Cart?.checkoutUrl"><button class="py-1 font-bold mt-8"> &gt; CHECKOUT</button></a>
        </div>
    </div>
</div>

<script>
    import Alpine from 'alpinejs';
    import Cart from '../assets/cart.js';
    window.Cart = Cart;
    let data = Alpine.$data(document.querySelector('[x-ref="shoppingcart"]'));
    data.D.Cart = Cart;
    data.cost = Cart.cost;
    data.lines = Cart.lines;
</script>
