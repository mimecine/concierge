---
import Layout from '../layouts/Layout.astro';
import { getStore } from '@netlify/blobs';

import ContextAlert from '../components/ContextAlert.astro';
import Markdown from '../components/Markdown.astro';
import uuid from 'uuid-random';
import { createStorefrontApiClient } from '@shopify/storefront-api-client';
import jsonwebtoken from 'jsonwebtoken';
import ShoppingCart from '../components/ShoppingCart.astro';
import ShoppingCartButton from '../components/ShoppingCartButton.astro';

export const prerender = false;

const SHP_ARCHIVE_TOKEN = '6b98671c3560340427f4a1baeaf7ef69';
const SHP_SHOP_TOKEN = '7766fe447c722c1317e528bdc92f1f2d';

const generate = (privateKey, { id, name, email, avatar, appId, kid, moderator }) => {
    const now = new Date();
    const jwt = jsonwebtoken.sign(
        {
            aud: 'jitsi',
            context: {
                user: {
                    id,
                    name,
                    avatar,
                    email: email,
                    moderator: moderator ? 'true' : 'false'
                },
                features: {
                    livestreaming: 'true',
                    recording: 'true',
                    transcription: 'true',
                    'outbound-call': 'true'
                }
            },
            iss: 'chat',
            room: '*',
            sub: appId,
            exp: Math.round(now.setHours(now.getHours() + 3) / 1000),
            nbf: Math.round(new Date().getTime() / 1000) - 10
        },
        privateKey,
        { algorithm: 'RS256', header: { kid } }
    );
    return jwt;
};
const sweet_names = ['Darling', 'Hunny', 'Love', 'Pretty', 'Precious', 'Sweetie', 'Handsome', 'Hugball', 'Twinkles'];
const store = getStore({ name: 'clients', consistency: 'strong' });
const counter = parseInt(await store.get('counter')) || 0;
console.log(counter);
const random_name = sweet_names[counter % sweet_names.length];
await store.set('counter', counter + 1);
const jitsi_jwt_token = generate(
    `-----BEGIN PRIVATE KEY-----${process.env.JITSI_API_SECRET.replace(/-----[\w\s]+-----/g, '')
        .split(/\s/)
        .join('\n')}-----END PRIVATE KEY-----`,
    {
        id: uuid(),
        name: random_name,
        email: 'kiosk@kioskkiosk.com',
        xavatar: 'my avatar url',
        appId: process.env.JITSI_API_APPID, // Your AppID ( previously tenant )
        kid: process.env.JITSI_API_KEY,
        moderator: false
    }
);

const configOverwrite = {
    apiLogLevels: ['error'],
    toolbarButtons: ['microphone', 'camera', 'hangup', 'tileview'],
    prejoinPageEnabled: false,
    disabledNotifications: ['notify.chatMessages']
};
const Jitsi = {
    Jaas: {
        domain: '8x8.vc',
        magicCookie: 'vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574',
        roomName: 'vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574/KIOSK_Headroom',
        dynamicBrandingUrl: 'https://headroom.netlify.app/branding.json',
        jwt: jitsi_jwt_token
    },
    Self: {
        domain: 'jitsi-headroom-1-u25913.vm.elestio.app/',
        roomName: 'KIOSK_Headroom'
    }
}.Jaas;
---

<Layout title="KIOSK: Headroom">
    <div class="grid grid-cols-[1fr,auto] grid-flow-col w-full h-screen font-mono text-xs border-black flex grow">
        <main class="bg-cyan-400 border-r border-black grid text-3xl font-bold font-sans">
            <div id="jaas-container" class="h-full"></div>
        </main>

        <aside class="w-20 lg:w-40 grid grid-flow-row grid-rows-[1fr,auto] bg-pink-300">
            <section x-data="{activeProduct:null}" class="overflow-scroll max-h-[calc(100vh-10rem)]" class="relative">
                <dialog
                    id="productView"
                    x-ref="productView"
                    @key.escape="activeProduct=null"
                    class="backdrop:bg-opacity-80 backdrop:bg-cyan-800 w-full lg:max-w-[60vw] xleft-4 xtop-4 p-4 bg-opacity-80 border border-black"
                >
                    <template x-if="null!=activeProduct">
                        <div class="columns-2 lg:columns-3">
                            <img
                                height="200"
                                width="200"
                                :src="activeProduct.featuredImage.url"
                                :alt="activeProduct.title"
                                :title="activeProduct.title"
                                class="border border-black object-contain cursor-pointer xw-[20vw] aspect-square"
                            />
                            <h1 x-text="activeProduct.title" class="sans font-bold uppercase py-2"></h1>
                            <div class="prose [&_p]:py-2" x-html="activeProduct.descriptionHtml"></div>

                            <div class="py-1">
                                <template
                                    x-if="activeProduct.active && activeProduct.variants.edges.length > 0"
                                    x-for="variant in activeProduct.variants.edges"
                                    :key="variant.node.id"
                                >
                                    <button
                                        :merchandiseId="variant.node.id"
                                        x-data="{adding:false,added:null}"
                                        @click.prevent="adding=true; added=await Alpine.store('globalCart').addItem(variant?.node.id); adding=false; setTimeout(()=>{$refs.productView.close()},800)"
                                        :disabled="!variant?.node.availableForSale"
                                        :class="{ 'bg-green-900':added, 'text-white':added, 'bg-orange-500':added==false}"
                                        class="appearance-none disabled:opacity-15 font-bold text-sm bold p-1 mb-1 mr-1 border border-black bg-opacity-50 focus:outline-none transition duration-500 first-of-type:hidden"
                                    >
                                        <span :class="{'animate-spin':adding}" x-text="added ? 'Got ' : 'Get ' "></span><span
                                            x-text="variant?.node.title!='Default Title'? variant?.node.title : 'It'"></span>
                                    </button>
                                </template>
                                <form method="dialog">
                                    <button
                                        type="submit"
                                        class="appearance-none font-bold p-1 xm-1 border border-red bg-white bg-opacity-50 focus:outline-none"
                                    >
                                        close
                                    </button>
                                </form>
                            </div>
                        </div>
                    </template>
                </dialog>
                <template x-for="(p,i) in $store.products">
                    <div
                        class="p-2 pb-0 opacity-50 first-of-type:opacity-100 m-auto"
                        :class="['w-full','w-11/12','w-10/12','w-9/12','w-8/12','w-7/12','w-6/12','w-5/12','w-4/12','w-3/12','w-2/12','w-1/12'].at(i)||'hidden'"
                    >
                        <img
                            height="200"
                            width="200"
                            :src="p.featuredImage.url"
                            :alt="p.title"
                            :title="p.title"
                            class="border border-black w-full cursor-pointer aspect-square bg-yellow-200"
                            @click="activeProduct=p; $refs.productView.showModal()"
                        />
                    </div>
                </template>
                <ShoppingCart />
            </section>
            <section class="bg-green-300 h-20 lg:h-40 border-t border-black place-content-center grid text-xs lg:text-lg">
                <ShoppingCartButton
                    >[CART<span x-show="Alpine.store('globalCart').lines.length" x-text="`(${Alpine.store('globalCart').totalQuantity})`"
                    ></span>]</ShoppingCartButton
                >
                <div x-show="Alpine.store('moderator')" class="text-center">MOD</div>
            </section>
        </aside>
    </div>
</Layout>
<script async src="https://8x8.vc/vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574/external_api.js"></script>
<script define:vars={{ jitsi_jwt_token, configOverwrite }}>
    window.addEventListener('load', () => {
        window.jitsi = new JitsiMeetExternalAPI('8x8.vc', {
            roomName: 'vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574/KIOSK_Headroom',
            parentNode: document.querySelector('#jaas-container'),
            dynamicBrandingUrl: 'https://headroom.netlify.app/branding.json',
            jwt: jitsi_jwt_token,
            configOverwrite
        });
        let messageCounter = 0;
        handleMessage = async (e) => {
            const re = new RegExp('/(?<cmd>[a-z]+)\\s?(?<order>:\\d+)? (?<args>.*)');
            const res = re.exec(e.message || e.subject);
            console.log('match:', res, e.message, re);
            if (res != null) {
                switch (res.groups.cmd) {
                    case 'addproduct':
                        let order = res.groups.order;
                        console.log('got addproduct:', res.groups.args, order);
                        let product = await suggestProducts(res.groups.args);
                        if (product.length > 0) {
                            product.at(0).order = order;
                            Alpine.store('products').unshift(product.at(0));
                            Alpine.store('products', distinct(Alpine.store('products'), 'id'));

                            Alpine.store('products').sort((a, b) => b.order - a.order);
                        }
                        break;
                    case 'log':
                        console.log('got log:', res.groups.args, e.message);
                        break;
                }
            }
        };

        jitsi.addListener('incomingMessage', handleMessage);

        jitsi.addListener('participantRoleChanged', async (e) => {
            window.ismoderator = e.role === 'moderator';
            Alpine.store('moderator', window.ismoderator);
        });
    });
    let distinct = (array, key) => [...new Map(array.map((item) => [item[key], item])).values()];
</script>
