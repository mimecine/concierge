---
import Layout from '../layouts/Layout.astro';
import { getStore } from '@netlify/blobs';

import ContextAlert from '../components/ContextAlert.astro';
import Markdown from '../components/Markdown.astro';
import uuid from 'uuid-random';
import { createStorefrontApiClient } from '@shopify/storefront-api-client';
import jsonwebtoken from 'jsonwebtoken';
import ShoppingCart from '../components/ShoppingCart.astro';
import ShoppingCartButton from '../components/ShoppingCartButton.astro';

export const prerender = false;

const SHP_ARCHIVE_TOKEN = '6b98671c3560340427f4a1baeaf7ef69';
const SHP_SHOP_TOKEN = '7766fe447c722c1317e528bdc92f1f2d';

const generate = (privateKey, { id, name, email, avatar, appId, kid, moderator }) => {
    const now = new Date();
    const jwt = jsonwebtoken.sign(
        {
            aud: 'jitsi',
            context: {
                user: {
                    id,
                    name,
                    avatar,
                    email: email,
                    moderator: moderator ? 'true' : 'false'
                },
                features: {
                    livestreaming: 'true',
                    recording: 'true',
                    transcription: 'true',
                    'outbound-call': 'true'
                }
            },
            iss: 'chat',
            room: '*',
            sub: appId,
            exp: Math.round(now.setHours(now.getHours() + 3) / 1000),
            nbf: Math.round(new Date().getTime() / 1000) - 10
        },
        privateKey,
        { algorithm: 'RS256', header: { kid } }
    );
    return jwt;
};
const sweet_names = ['Darling', 'Hunny', 'Love', 'Pretty', 'Precious', 'Sweetie', 'Handsome', 'Hugball', 'Twinkles'];
const store = getStore({ name: 'clients', consistency: 'strong' });
const counter = parseInt(await store.get('counter')) || 0;
console.log(counter);
const random_name = sweet_names[counter % sweet_names.length];
await store.set('counter', counter + 1);
const jitsi_jwt_token = generate(
    `-----BEGIN PRIVATE KEY-----${process.env.JITSI_API_SECRET.replace(/-----[\w\s]+-----/g, '')
        .split(/\s/)
        .join('\n')}-----END PRIVATE KEY-----`,
    {
        id: uuid(),
        name: random_name,
        email: 'kiosk@kioskkiosk.com',
        xavatar: 'my avatar url',
        appId: process.env.JITSI_API_APPID, // Your AppID ( previously tenant )
        kid: process.env.JITSI_API_KEY,
        moderator: false
    }
);
---

<Layout title="KIOSK:Headroom">
    <div x-data="cart()" class="grid grid-cols-[1fr,auto] grid-flow-col w-full h-screen font-mono text-xs border-black flex grow">
        <main class="bg-cyan-400 border-r border-black grid text-3xl font-bold font-sans">
            <script async src="https://8x8.vc/vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574/external_api.js"></script>
            <style>
                #jaas-container {
                    height: 100%;
                }
            </style>
            <script type="text/javascript" define:vars={{ jitsi_jwt_token }}>
                window.addEventListener('alpine:init', () => {
                    Alpine.store('products', []);
                    Alpine.store('cart', {});
                    Alpine.store('moderator', false);
                });
                window.addEventListener('load', () => {
                    const api = new JitsiMeetExternalAPI('8x8.vc', {
                        roomName: 'vpaas-magic-cookie-c94a3fb2bf864a889957b91b85fd6574/KIOSK_Headroom',
                        parentNode: document.querySelector('#jaas-container'),
                        configOverwrite: {
                            toolbarButtons: ['microphone', 'camera', 'hangup', 'tileview'],
                            prejoinPageEnabled: false,
                            apiLogLevels: ['error'],
                            disabledNotifications: [
                                'notify.chatMessages' // shown when receiving chat messages while the chat window is closed
                                // 'notify.grantedTo' // shown when moderator rights were granted to a participant
                            ]
                        },
                        interfaceConfigOverwrite: {
                            DISABLE_VIDEO_BACKGROUND: false,
                            DEFAULT_BACKGROUND: '#a8c8f9',
                            AUDIO_LEVEL_PRIMARY_COLOR: 'rgba(255,0,0,0.4)',
                            AUDIO_LEVEL_SECONDARY_COLOR: 'rgba(0,0,255,0.2)'
                        },

                        jwt: jitsi_jwt_token
                    });

                    window.jitsi = api;

                    Alpine.store('products', []);
                    Alpine.store('cart', {});

                    window.handleMessage = async (e) => {
                        console.log('message:', e);
                        const re = new RegExp('/(?<cmd>[a-z]+) (?<args>.*)');
                        const res = re.exec(e.message || e.subject);
                        console.log('match:', res);
                        if (res != null) {
                            switch (res.groups.cmd) {
                                case 's':
                                    let products = await suggestProducts(res.groups.args);
                                    if (products.length > 0) {
                                        console.log('F::', products);
                                        Alpine.store('products').unshift(products.at(0));
                                    }
                            }
                            return false;
                        }
                    };

                    jitsi.addListener('incomingMessage', window.handleMessage);
                    jitsi.addListener('message', async (e) => {
                        console.log('message event:', e);
                    });
                    jitsi.addListener('subjectChange', async (e) => {
                        console.log('subjectChange event:', e);
                        let products = await suggestProducts(e.subject);
                        if (products.length > 0) {
                            console.log('F::', products);
                            Alpine.store('products').unshift(products.at(0));
                        }
                    });
                    jitsi.addListener('participantRoleChanged', async (e) => {
                        console.log('participantRoleChanged event:', e);
                        window.ismoderator = e.role === 'moderator';
                    });

                    async function fetchWithTimeout(resource, options = {}) {
                        const { timeout = 8000 } = options;

                        const controller = new AbortController();
                        const id = setTimeout(() => controller.abort(), timeout);

                        const response = await fetch(resource, {
                            ...options,
                            signal: controller.signal
                        });

                        clearTimeout(id);
                        return response;
                    }
                });
            </script>
            <div id="jaas-container"></div>
        </main>

        <aside class="w-40 grid grid-flow-row grid-rows-[1fr,auto] bg-pink-300">
            <section x-data="{activeProduct:null}" class="overflow-scroll max-h-[calc(100vh-10rem)]">
                <dialog
                    id="productView"
                    x-ref="productView"
                    @key.escape="activeProduct=null"
                    class="backdrop:bg-opacity-80 backdrop:bg-cyan-800 w-[60vw] left-4 top-4 p-4 bg-opacity-80 border border-black"
                >
                    <template x-if="null!=activeProduct">
                        <div class="columns-3">
                            <img
                                height="200"
                                width="200"
                                :src="activeProduct.featuredImage.url"
                                :alt="activeProduct.title"
                                :title="activeProduct.title"
                                class="border border-black object-contain cursor-pointer xw-[20vw] aspect-square"
                            />
                            <h1 x-text="activeProduct.title" class="sans font-bold uppercase py-2"></h1>
                            <div class="prose" x-html="activeProduct.descriptionHtml"></div>

                            <div class="py-1">
                                <template
                                    x-if="activeProduct.active && activeProduct.variants.edges.length > 0"
                                    x-for="variant in activeProduct.variants.edges"
                                    :key="variant.node.id"
                                >
                                    <button
                                        :merchandiseId="variant.node.id"
                                        x-data="{adding:false,added:null}"
                                        @click.prevent="adding=true; added=await await Alpine.store('globalCart').addItem(variant?.node.id); adding=false; setTimeout(()=>{$refs.productView.close()},500)"
                                        :disabled="!variant?.node.availableForSale"
                                        :class="{ 'bg-green-900':added, 'text-white':added, 'bg-orange-500':added==false}"
                                        class="appearance-none disabled:opacity-15 font-bold text-sm bold p-1 mb-1 mr-1 border border-black bg-opacity-50 focus:outline-none transition duration-500 first-of-type:hidden"
                                    >
                                        <span :class="{'animate-spin':adding}" x-text="added ? 'Got ' : 'Get ' "></span><span
                                            x-text="variant?.node.title!='Default Title'? variant?.node.title : 'It'"></span>
                                    </button>
                                </template>
                                <form method="dialog">
                                    <button
                                        type="submit"
                                        class="appearance-none font-bold p-1 xm-1 border border-red bg-white bg-opacity-50 focus:outline-none"
                                    >
                                        close
                                    </button>
                                </form>
                            </div>
                        </div>
                    </template>
                </dialog>
                <template x-for="p in $store.products">
                    <div class="p-2 pb-0 opacity-50 first-of-type:opacity-100">
                        <img
                            height="200"
                            width="200"
                            :src="p.featuredImage.url"
                            :alt="p.title"
                            :title="p.title"
                            class="border border-black w-full cursor-pointer aspect-square bg-yellow-200"
                            @click="activeProduct=p; $refs.productView.showModal()"
                        />
                    </div>
                </template>
            </section>
            <section class="bg-green-300 h-40 border-t border-black place-content-center grid">
                <ShoppingCartButton
                    >[ THE CART <span x-show="Alpine.store('globalCart').lines.length" x-text="`(${dAlpine.store('globalCart').totalQuantity})`"
                    ></span>]</ShoppingCartButton
                >

                <ShoppingCart />
            </section>
        </aside>
    </div>
</Layout>
